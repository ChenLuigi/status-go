pipeline {
  agent { label 'master' }

  environment {
    STATUS_GO_PATH = 'src/github.com/status-im/status-go'
  }

  options {
    disableConcurrentBuilds()
    /* necessary to make GOPATH work */
    checkoutToSubdirectory("${env.STATUS_GO_PATH}")
    /* manage how many builds we keep */
    buildDiscarder(logRotator(
      numToKeepStr: '20',
      daysToKeepStr: '30',
    ))
  }

  stages {
    stage('Prep') {
      steps { script {
        lib = load('_assets/ci/lib.groovy')
        sh 'env'
        println("Git Branch: ${lib.gitBranch()}")
        println("Git Commit: ${lib.gitCommit()}")
      } }
    }
    stage('Build') {
      parallel {
        stage('Linux') {
          agent { label 'linux' }
          environment {
            GOPATH = "${env.WORKSPACE}"
            PATH = "${env.GOPATH}/bin:${env.PATH}"
          }
          stages {
            stage('Setup') { steps { dir(env.STATUS_GO_PATH) {
              sh 'echo $WORKSPACE'
              sh 'echo $GOPATH'
              sh 'pwd'
              sh 'make setup'
            } } }
            stage('Lint/Test') { steps { dir(env.STATUS_GO_PATH) {
              sh 'make ci'
            } } }
            stage('Cross-compile') { steps { dir(env.STATUS_GO_PATH) {
              sh 'go get github.com/status-im/xgo'
              sh 'make statusgo-android'
            } } }
          }
        }
        stage('MacOS') {
          agent { label 'macos' }
          environment {
            GOPATH = "${env.WORKSPACE}"
            PATH = "${env.GOPATH}/bin:${env.PATH}"
          }
          stages {
            stage('Setup') { steps { dir(env.STATUS_GO_PATH) {
              sh 'pwd'
              sh 'make setup'
            } } }
            stage('Cross-compile') { steps { dir(env.STATUS_GO_PATH) {
              sh 'go get github.com/status-im/xgo'
              sh 'make statusgo-ios-simulator'
              dir('build/bin/statusgo-ios-9.3-framework') {
                sh 'zip -r status-go-ios.zip Statusgo.framework'
              }
            } } }
          }
        }
      }
    }
    stage('Deploy') {
      steps { script {
        lib.deployToArtifactory()
      } }
    }
  }
}
