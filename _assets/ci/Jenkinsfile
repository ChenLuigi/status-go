#!/usr/bin/env groovy

@NonCPS
def getVersion(branch, sha, buildNumber) {
    version = branch.replaceAll(/\//, '-')

    if (sha?.trim()) {
        version = version + '-g' + sha
    }

    if (buildNumber?.trim()) {
        version = version + '-' + buildNumber
    }

    return version
}

node('linux') {
    checkout scm

    def remoteOriginRegex = ~/^remotes\/origin\//

    gitSHA = sh(returnStdout: true, script: 'git rev-parse HEAD').trim()
    gitShortSHA = gitSHA.take(7)
    gitBranch = sh(returnStdout: true, script: 'git name-rev --name-only HEAD').trim() - remoteOriginRegex

    // For branch builds, replace the old artifact. For develop keep all of them.
    version = gitBranch == 'develop' ? getVersion(gitBranch, gitShortSHA, '') : getVersion(gitBranch, gitShortSHA, env.BUILD_ID)

    stage('Prep') {
        println "Current JOB: ${env.JOB_NAME}\nBranch: ${gitBranch}\nSHA: ${gitSHA}\nVersion: ${version}"
        sh 'env'

        dir(cloneDir) {
            /* load common lib */
            cmn = load('_assets/ci/common.groovy')

            sh 'make setup'
        }
    }

    stage('Build and test') {
        sh 'make ci'
    }

    stage('Build packages') {
        sh 'go get github.com/status-im/xgo'
        dir(cloneDir) {
            // Ensure folders are created with correct owner (otherwise xgo will create files owned by root)
            sh 'mkdir -p build/lib/'
        }

        parallel (
            'statusgo-android': {
                dir(cloneDir) {
                    sh """
                        make statusgo-android
                        cd build/lib/
                        mv statusgo-android-16.aar status-go-${version}.aar
                    """
                }
            },
            'statusgo-ios-simulator': {
                dir(cloneDir) {
                    sh """
                        make statusgo-ios-simulator
                        cd build/lib/
                        zip -r status-go-ios-simulator-${version}.zip statusgo-ios-9.3-framework/Statusgo.framework
                    """
                }
            }
        )

        parallel (
            'statusgo-linux': {
                dir(cloneDir) {
                    sh """
                        make statusgo-linux
                        mkdir -p build/lib/linux
                        cd build/lib/linux
                        mkdir -p include lib
                        mv ../statusgo-linux-amd64.a lib/libstatus.a
                        mv ../statusgo-linux-amd64.h include/libstatus.h
                        zip status-go-linux-${version}.zip lib/* include/*
                    """
                }
            },
            'statusgo-macos': {
                dir(cloneDir) {
                    sh """
                        make statusgo-macos
                        mkdir -p build/lib/darwin
                        cd build/lib/darwin
                        mkdir -p include lib
                        mv ../statusgo-darwin-10.6-amd64.a lib/libstatus.a
                        mv ../statusgo-darwin-10.6-amd64.h include/libstatus.h
                        zip status-go-darwin-${version}.zip lib/* include/*
                    """
                }
            }
        )
    }

    stage('Deploy') {
        dir(cloneDir) {
            def server = Artifactory.server 'artifacts'
            def uploadSpec = """{
                "files": [
                    {
                        "pattern": "build/lib/statusgo-android-16.aar",
                        "target": "libs-release-local/status-im/status-go/${version}/status-go-${version}.aar"
                    },
                    {
                        "pattern": "build/lib/statusgo-ios-9.3-framework/status-go-ios.zip",
                        "target": "libs-release-local/status-im/status-go-ios-simulator/${version}/status-go-ios-simulator-${version}.zip"
                    }
                ]
            }"""

            def buildInfo = Artifactory.newBuildInfo()
            buildInfo.env.capture = false
            buildInfo.name = 'status-go (' + gitBranch + '-' + gitShortSHA + ')'
            server.upload(uploadSpec, buildInfo)
            server.publishBuildInfo(buildInfo)

            androidArtifactUrl = cmn.uploadArtifact("build/lib/status-go-${version}.aar")
            linuxArtifactUrl = cmn.uploadArtifact("build/lib/linux/status-go-linux-${version}.zip")
            iosArtifactUrl = cmn.uploadArtifact("build/lib/status-go-ios-simulator-${version}.zip")
            macosArtifactUrl = cmn.uploadArtifact("build/lib/darwin/status-go-darwin-${version}.zip")
        }
    }
}
